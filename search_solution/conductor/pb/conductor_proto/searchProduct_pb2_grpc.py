# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from conductor_proto import searchProduct_pb2 as conductor__proto_dot_searchProduct__pb2


class SearchProductServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProductsDataByTerm = channel.unary_unary(
                '/searchProduct.SearchProductService/GetProductsDataByTerm',
                request_serializer=conductor__proto_dot_searchProduct__pb2.TermRequest.SerializeToString,
                response_deserializer=conductor__proto_dot_searchProduct__pb2.CompleteProducts.FromString,
                )
        self.GetProductsDataStreamByTerm = channel.unary_stream(
                '/searchProduct.SearchProductService/GetProductsDataStreamByTerm',
                request_serializer=conductor__proto_dot_searchProduct__pb2.TermRequest.SerializeToString,
                response_deserializer=conductor__proto_dot_searchProduct__pb2.CompleteProduct.FromString,
                )
        self.GetProductsDataBySkusStream = channel.stream_unary(
                '/searchProduct.SearchProductService/GetProductsDataBySkusStream',
                request_serializer=conductor__proto_dot_searchProduct__pb2.SkuRequest.SerializeToString,
                response_deserializer=conductor__proto_dot_searchProduct__pb2.CompleteProducts.FromString,
                )
        self.GetProductsDataStreamBySkusStream = channel.stream_stream(
                '/searchProduct.SearchProductService/GetProductsDataStreamBySkusStream',
                request_serializer=conductor__proto_dot_searchProduct__pb2.SkuRequest.SerializeToString,
                response_deserializer=conductor__proto_dot_searchProduct__pb2.CompleteProduct.FromString,
                )


class SearchProductServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProductsDataByTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductsDataStreamByTerm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductsDataBySkusStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductsDataStreamBySkusStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProductsDataByTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductsDataByTerm,
                    request_deserializer=conductor__proto_dot_searchProduct__pb2.TermRequest.FromString,
                    response_serializer=conductor__proto_dot_searchProduct__pb2.CompleteProducts.SerializeToString,
            ),
            'GetProductsDataStreamByTerm': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProductsDataStreamByTerm,
                    request_deserializer=conductor__proto_dot_searchProduct__pb2.TermRequest.FromString,
                    response_serializer=conductor__proto_dot_searchProduct__pb2.CompleteProduct.SerializeToString,
            ),
            'GetProductsDataBySkusStream': grpc.stream_unary_rpc_method_handler(
                    servicer.GetProductsDataBySkusStream,
                    request_deserializer=conductor__proto_dot_searchProduct__pb2.SkuRequest.FromString,
                    response_serializer=conductor__proto_dot_searchProduct__pb2.CompleteProducts.SerializeToString,
            ),
            'GetProductsDataStreamBySkusStream': grpc.stream_stream_rpc_method_handler(
                    servicer.GetProductsDataStreamBySkusStream,
                    request_deserializer=conductor__proto_dot_searchProduct__pb2.SkuRequest.FromString,
                    response_serializer=conductor__proto_dot_searchProduct__pb2.CompleteProduct.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'searchProduct.SearchProductService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchProductService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProductsDataByTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/searchProduct.SearchProductService/GetProductsDataByTerm',
            conductor__proto_dot_searchProduct__pb2.TermRequest.SerializeToString,
            conductor__proto_dot_searchProduct__pb2.CompleteProducts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductsDataStreamByTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/searchProduct.SearchProductService/GetProductsDataStreamByTerm',
            conductor__proto_dot_searchProduct__pb2.TermRequest.SerializeToString,
            conductor__proto_dot_searchProduct__pb2.CompleteProduct.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductsDataBySkusStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/searchProduct.SearchProductService/GetProductsDataBySkusStream',
            conductor__proto_dot_searchProduct__pb2.SkuRequest.SerializeToString,
            conductor__proto_dot_searchProduct__pb2.CompleteProducts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductsDataStreamBySkusStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/searchProduct.SearchProductService/GetProductsDataStreamBySkusStream',
            conductor__proto_dot_searchProduct__pb2.SkuRequest.SerializeToString,
            conductor__proto_dot_searchProduct__pb2.CompleteProduct.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
